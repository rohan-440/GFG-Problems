/*
Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:

Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10}
Example 2:
Input: N = 5, arr[] = {1, 2, 3, 4, 5}
       sum = 10
Output: 3
Explanation: {1, 2, 3, 4}, {1, 4, 5}, 
             {2, 3, 5}

Your Task:  
You don't need to read input or print anything. Complete the function perfectSum() which takes N, array arr[] and sum as input parameters and returns an integer value

Expected Time Complexity: O(N*sum)
Expected Auxiliary Space: O(N*sum)

Constraints:
1 ≤ N*sum ≤ 106
0<=arr[I]<=106
*/



//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

	public:
	long long int mod = 1e9+7;
	int func(int arr[],int i,int sum,vector<vector<int>> &dp){
	    
	    if(i == 0){
	        if(sum == 0 && arr[i] == 0){
	        return 2;
	    } 
	    if(sum == 0 || arr[i] == sum){
	        return 1;
	           }
	           return 0;
	    }
	    if(dp[i][sum] != -1){
	        return dp[i][sum]%mod;
	    }
	    
	    int pick = 0;
	    if(arr[i]<=sum){
	        pick = func(arr,i-1,sum-arr[i],dp);
	    }
	    
	    int notpick = func(arr,i-1,sum,dp);
	    
	    return dp[i][sum] = ((notpick%mod)+(pick%mod));
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        vector<vector<int>> dp(n+1,vector<int>(sum+1,-1));
        return func(arr,n-1,sum,dp)%mod;
	}
	  
};

//{ Driver Code Starts.
int main() 
{
   	
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n, sum;

        cin >> n >> sum;

        int a[n];
        for(int i = 0; i < n; i++)
        	cin >> a[i];

       

	    Solution ob;
	    cout << ob.perfectSum(a, n, sum) << "\n";
	     
    }
    return 0;
}

// } Driver Code Ends
