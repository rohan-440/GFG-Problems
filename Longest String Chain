You are given an array of words where each word consists of lowercase English letters.

wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.

For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".
A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.

Return the length of the longest possible word chain with words chosen from the given list of words.

Example 1:

Input:
n = 6
words = ["a","b","ba","bca","bda","bdca"]
Output:
4
Explanation:
One of the longest word chains is ["a","ba","bda","bdca"].
Example 2:

Input:
n = 2
words = ["abcd","dbqca"]
Output:
1
Explanation:
The trivial word chain ["abcd"] is one of the longest word chains.
Your Task:
You don't need to read input or print anything. Your task is to complete the function longestChain() which takes integer n and an array of words and returns the size of longest possible word chain.

Expected Time Complexity: O( n * n * L),where L is the length of the longest string in the words.
Expected Space Complexity: O(n)

Constraint:
1 <= n <= 1000
1 <= words[i].length <= 16
 words[i] only consists of lowercase English letters.
 
 
 
 
 
 
 //{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
  bool check(string &s1,string &s2){
      if(s1.size() != s2.size()+1) return false;
      int i = 0 , j = 0 ;
      while(i < s1.size()){
          if(s1[i] == s2[j]){
              i++;
              j++;
          }
          else {
              i++;
          }
      }
      if(i == s1.size() && j == s2.size()){
          return true;
      }
      return false;
  }
  
  
  static bool comp(string &s1,string &s2){
      return s1.size() < s2.size();
  }
    int longestChain(int n, vector<string>& words) {
       sort(words.begin(),words.end(),comp);
       
        vector<int> dp(n,1);
        int maxi = 1;
        
        
        for(int i = 0 ; i < n;i++){
            for(int prev = 0 ; prev < i;prev++){
                if(check(words[i],words[prev]) && dp[prev]+1 > dp[i]  ){
                    dp[i] = 1+ dp[prev];
                }
            }
            if(maxi < dp[i]){
                maxi = dp[i];
            }
        }
        
        
        
        
        return maxi;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<string> words(N);
        for (int i = 0; i < N; i++) {
            cin >> words[i];
        }
        Solution obj;
        cout << obj.longestChain(N, words) << "\n";
    }
    return 0;
}
// } Driver Code Ends
