/*
Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ].  
Note: Assume that you have an infinite supply of each type of coin. 


Example 1:

Input:
sum = 4 , 
N = 3
coins[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.
Example 2:

Input:
Sum = 10 , 
N = 4
coins[] ={2,5,3,6}
Output: 5
Explanation: Five Possible ways are:
{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} 
and {5,5}.

Your Task:
You don't need to read input or print anything. Your task is to complete the function count() which accepts an array coins[ ] its size N and sum as input parameters and returns the number of ways to make change for given sum of money. 


Expected Time Complexity: O(sum*N)
Expected Auxiliary Space: O(sum)


Constraints:
1 <= sum, N <= 103

*/



//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    long long int count(int coins[], int N, int sum) {
        
      vector <long long int> prev(sum+1,-1),curr(sum+1,-1);
      
      
        for(int s =0; s <=sum ; s++){
            prev[s] = (s%coins[0] == 0);
        }
        for(int i = 1 ; i < N ; i++){
            for(int s = 0 ; s <= sum ; s++){
                 long long  int nottake = prev[s];
                 long long  int take = 0 ;
                 if(coins[i] <= s){
                take = prev[s-coins[i]];
      }
                   
            prev[s] = nottake+take;
        }
         curr = prev;
        }
        
        
        
        return prev[sum];
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int sum, N;
        cin >> sum >> N;
        int coins[N];
        for (int i = 0; i < N; i++) cin >> coins[i];
        Solution ob;
        cout << ob.count(coins, N, sum) << endl;
    }

    return 0;
}


// } Driver Code Ends
