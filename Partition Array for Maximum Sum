Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray. Return the largest sum of the given array after partitioning.

Example 1:

Input:
n = 7
k = 3
arr = [1,15,7,9,2,5,10]
Output:
84
Explanation:
arr becomes [15,15,15,9,10,10,10]
Example 2:

Input:
n = 1
k = 1
arr = [1]
Output:
1
Your Task:
You don't have to read input or print anything. Your task is to complete the function Solve() which takes the integer n and array arr and integer k and returns the Largest Sum of the Array after Partitioning.

Expected Time Complexity: O(n2)
Expected Space Complexity: O(n)





//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
    public:
    int f(int i , int n,int k,vector<int> &arr,vector<int> &dp){
        if(i == n){
            return 0;
        }
        if(dp[i] != -1){
            return dp[i];
        }
         int len = 0,maxi = INT_MIN,max_ans = INT_MIN,sum;
        for(int j = i ; j < min(i+k,n); j++){
            len++;
        
            maxi = max(maxi,arr[j]);
               sum = (len * maxi)+f(j+1,n,k,arr,dp);
            max_ans = max(max_ans,sum);
        }
        
        return dp[i] = max_ans;
    }
    int solve(int n, int k, vector<int>& arr){
        vector<int> dp(n+1,-1);
        return f(0,n,k,arr,dp);
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--){
        int n,k; cin>>n>>k;
        vector<int> arr;
        
        for(int i=0; i<n; ++i){
            int x; cin>>x;
            arr.push_back(x);
        }
        
        Solution obj;
        cout<<obj.solve(n,k,arr)<<"\n";
    }
    return 0;
}
// } Driver Code Ends
