Given two strings 'str' and a wildcard pattern 'pattern' of length N and M respectively,  You have to print '1' if the wildcard pattern is matched with str else print '0' .

The wildcard pattern can include the characters ‘?’ and ‘*’
‘?’ – matches any single character
‘*’ – Matches any sequence of characters (including the empty sequence)

Note: The matching should cover the entire str (not partial str).

 

Example 1:

Input:
pattern = "ba*a?"
str = "baaabab"
Output: 1
Explanation: replace '*' with "aab" and 
'?' with 'b'. 
Example 2:

Input:
pattern = "a*ab"
str = "baaabab"
Output: 0
Explanation: Because of'a' at first position,
pattern and str can't be matched. 

Your Task:
You don't need to read input or print anything. Your task is to complete the function wildCard() which takes the two strings 'pattern' and 'str' as input parameters and returns the answer.

 

Expected Time Complexity: O(N*M)
Expected Auxiliary Space: O(N*M)

Constraints:
1 <= length of(str,pat) <= 200



//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
  public:
/*You are required to complete this method*/
    bool f(int i,int j, string pattern,string str,vector<vector<int>> &dp){
        if(i < 0 && j < 0){
            return true;
        }
        if(i < 0 && j >=0){
            return false;
        }
         if(i >= 0 && j < 0){
            for(int k = 0 ; k <= i; k++){
                if(pattern[k] != '*'){
                    return false;
                }
            }
                return true;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(pattern[i] == str[j] || pattern[i] == '?'){
            return dp[i][j] = f(i-1,j-1,pattern,str,dp);
        }
          if(pattern[i] == '*'){
            return dp[i][j] = f(i-1,j,pattern,str,dp)||f(i,j-1,pattern,str,dp);
        }
         return false;
    }

    int wildCard(string pattern,string str)
    {  
        int n = pattern.size();
        int m = str.size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        if(f(n-1,m-1,pattern,str,dp)) return 1;
        else return 0;
    }
};

//{ Driver Code Starts.
int main()
{
   int t;
   cin>>t;
   while(t--)
   {
           string pat,text;
           cin>>pat;
cin.ignore(numeric_limits<streamsize>::max(),'\n');
           cin>>text;
           Solution obj;
           cout<<obj.wildCard(pat,text)<<endl;
   }
}

// } Driver Code Ends
