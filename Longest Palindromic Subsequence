Given a String, find the longest palindromic subsequence.


Example 1:

Input:
S = "bbabcbcab"
Output: 7
Explanation: Subsequence "babcbab" is the
longest subsequence which is also a palindrome.
Example 2:

Input: 
S = "abcd"
Output: 1
Explanation: "a", "b", "c" and "d" are
palindromic and all have a length 1.

Your Task:
You don't need to read input or print anything. Your task is to complete the function longestPalinSubseq() which takes the string S as input and returns an integer denoting the length of the longest palindromic subsequence of S.


Expected Time Complexity: O(|S|*|S|).
Expected Auxiliary Space: O(|S|*|S|).


Constraints:
1 ≤ |S| ≤ 1000







//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution{
  public:
  int f(int i ,int j,string A,string t,vector<vector<int>> &dp){
      if(i < 0 || j < 0){
          return 0;
      }
      if(dp[i][j] != -1){
          return dp[i][j];
      }
      if(A[i] == t[j]){
           return 1+f(i-1,j-1,A,t,dp);
      }
      return dp[i][j] = max(f(i-1,j,A,t,dp),f(i,j-1,A,t,dp));
  }
    int longestPalinSubseq(string A) {
       
        int n = A.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
         string t = A;
         reverse(t.begin(),t.end());
        return f(n-1,n-1,A,t,dp);
    }
};

//{ Driver Code Starts.

int32_t main()
{
    int t; cin >> t;
    while (t--)
    {
        string s; cin >> s;
        Solution ob;
        cout << ob.longestPalinSubseq(s) << endl;
    }
}
// Contributed By: Pranay Bansal

// } Driver Code Ends
