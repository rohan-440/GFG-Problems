Given two strings s and t. Return the minimum number of operations required to convert s to t.
The possible operations are permitted:

Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.
 

Example 1:

Input: 
s = "geek", t = "gesek"
Output: 1
Explanation: One operation is required 
inserting 's' between two 'e's of str1.
Example 2:

Input : 
s = "gfg", t = "gfg"
Output: 
0
Explanation: Both strings are same.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function editDistance() which takes strings s and t as input parameters and returns the minimum number of operation to convert the string s to string t. 


Expected Time Complexity: O(|s|*|t|)
Expected Space Complexity: O(|s|*|t|)


Constraints:
1 ≤ Length of both strings ≤ 100
Both the strings are in lowercase.




//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  int f(int m,int n,string &s,string &t,vector<vector<int>> &dp){
      if(n < 0){
          return m+1;
      }
      if(m < 0){
          return n+1;
      }
      if(dp[m][n] != -1){
          return dp[m][n];
      }
      if(s[m] == t[n]){
       return dp[m][n] = f(m-1,n-1,s,t,dp);   
      }
      else {
          int insert = 1+f(m,n-1,s,t,dp);
          int Delete = 1+f(m-1,n,s,t,dp);
          int replace = 1+f(m-1,n-1,s,t,dp);
          return dp[m][n] = min(insert,min(Delete,replace));
      }
  }
    int editDistance(string s, string t) {
        // Code here
        int m = s.size();
        int n = t.size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return f(m-1,n-1,s,t,dp);
    }
};

//{ Driver Code Starts.
int main() {
    int T;
    cin >> T;
    while (T--) {
        string s, t;
        cin >> s >> t;
        Solution ob;
        int ans = ob.editDistance(s, t);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends
